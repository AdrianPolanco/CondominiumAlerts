// <auto-generated />
using System;
using CondominiumAlerts.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CondominiumAlerts.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250314013623_AddSummaryTable")]
    partial class AddSummaryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Condominiums");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.LevelOfPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CondominiumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.ToTable("LevelOfPriorities");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondominiumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("MessageBeingRepliedToId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("MessageBeingRepliedToId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondominiumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("LevelOfPriorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("LevelOfPriorityId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondominiumId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LevelOfPriorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("LevelOfPriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CondominiumAlerts.Features.Features.Summary.Summary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CondominiumId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("TriggeredBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("TriggeredBy");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("CondominiumUser", b =>
                {
                    b.Property<Guid>("CondominiumsId")
                        .HasColumnType("uuid");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("CondominiumsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CondominiumUser");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Comment", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.LevelOfPriority", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", "Condominium")
                        .WithMany("LevelOfPriorities")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Condominium");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Message", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", "Condominium")
                        .WithMany("Messages")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "CreatorUser")
                        .WithMany("MessagesCreatedByUser")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Message", "MessageBeingRepliedTo")
                        .WithMany()
                        .HasForeignKey("MessageBeingRepliedToId");

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "ReceiverUser")
                        .WithMany("MessagesReceivedByUser")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Condominium");

                    b.Navigation("CreatorUser");

                    b.Navigation("MessageBeingRepliedTo");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Notification", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", "Condominium")
                        .WithMany()
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.LevelOfPriority", "LevelOfPriority")
                        .WithMany("Notifications")
                        .HasForeignKey("LevelOfPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "ReceiverUser")
                        .WithMany("NotificationsReceivedByUser")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Condominium");

                    b.Navigation("LevelOfPriority");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Post", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", "Condominium")
                        .WithMany("Posts")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.LevelOfPriority", "LevelOfPriority")
                        .WithMany("Posts")
                        .HasForeignKey("LevelOfPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Condominium");

                    b.Navigation("LevelOfPriority");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.User", b =>
                {
                    b.OwnsOne("CondominiumAlerts.Domain.Aggregates.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("text");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("City");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Street");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CondominiumAlerts.Features.Features.Summary.Summary", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", "Condominium")
                        .WithMany("Summaries")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", "User")
                        .WithMany("TriggeredSummaries")
                        .HasForeignKey("TriggeredBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Condominium");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CondominiumUser", b =>
                {
                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", null)
                        .WithMany()
                        .HasForeignKey("CondominiumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CondominiumAlerts.Domain.Aggregates.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Condominium", b =>
                {
                    b.Navigation("LevelOfPriorities");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.LevelOfPriority", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CondominiumAlerts.Domain.Aggregates.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MessagesCreatedByUser");

                    b.Navigation("MessagesReceivedByUser");

                    b.Navigation("NotificationsReceivedByUser");

                    b.Navigation("Posts");

                    b.Navigation("TriggeredSummaries");
                });
#pragma warning restore 612, 618
        }
    }
}
